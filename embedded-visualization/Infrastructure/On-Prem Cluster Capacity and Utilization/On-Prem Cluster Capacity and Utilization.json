{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "description": "v.1.0.6",
  "editable": true,
  "gnetId": null,
  "graphTooltip": 1,
  "id": 74,
  "iteration": 1637347473363,
  "links": [],
  "panels": [
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 48,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- ! Old Quick Subract Query\n\n/*\nselect \n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) as \"Previous VM Count\", count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Current VM Count\",\n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) - count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Deleted VM Count\"\nfrom metric\njoin scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[$Cluster]::bigint[], false) s on s.oid = metric.entity_oid\n  where $__timeFilter(time)\n  AND entity_type = 'VIRTUAL_MACHINE'\n  AND time BETWEEN s.from_time AND s.to_time\n  AND type = 'STORAGE_AMOUNT'  */\n  \n  with monthly_vms as (\n    select date_trunc('hour', time) as current\n          ,entity_oid as vm_oid\n      FROM (\n        select time\n              ,entity_oid\n          from extractor.metric\n          join scope s on s.scoped_oid = entity_oid\n         WHERE entity_type = 'VIRTUAL_MACHINE'\n           AND type = 'STORAGE_PROVISIONED'\n           AND $__timeFilter(time)\n           and s.seed_oid in ($Cluster)\n           and (start, finish) overlaps ($__timeFrom(), $__timeTo())\n      ) as metric_data\n     GROUP BY 1, 2\n),\nadded_and_removed as (\n    SELECT COUNT(DISTINCT vm_oid) FILTER (where current = (select max(current) from monthly_vms)) as \"Virtual Machine Total Count\",\n           COUNT(DISTINCT vm_oid) FILTER (WHERE vm_oid NOT IN (SELECT DISTINCT vm_oid\n                                                                 FROM monthly_vms m2\n                                                               WHERE m2.current = (select min(current) from monthly_vms))) as \"Virtual Machines Added\"\n          ,COUNT(DISTINCT vm_oid) FILTER (WHERE vm_oid NOT IN (SELECT DISTINCT vm_oid\n                                                                 FROM monthly_vms m2\n                                                                WHERE m2.current = (select max(current) from monthly_vms))) as \"Virtual Machines Removed\"\n      FROM monthly_vms m1\n)\nselect * from added_and_removed\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Scoped Virtual Machines Counter (within Timescale)",
      "transformations": [
        {
          "id": "filterByRefId",
          "options": {}
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Virtual Machine Delta",
            "binary": {
              "left": "Virtual Machines Added",
              "operator": "-",
              "reducer": "sum",
              "right": "Virtual Machines Removed"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Virtual Machine Delta": 2,
              "Virtual Machine Total Count": 3,
              "Virtual Machines Added": 1,
              "Virtual Machines Removed": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": "Turbo Timescale",
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "light-blue",
                "value": null
              },
              {
                "color": "purple",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 49,
      "options": {
        "colorMode": "background",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "vertical",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "text": {},
        "textMode": "auto"
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- ! Old Quick Subract Query\n\n/*\nselect \n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) as \"Previous Host Count\", count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Current Host Count\",\n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) - count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Deleted Host Count\"\nfrom metric\njoin scope_to($__timeFrom(), $__timeTo(), 'PHYSICAL_MACHINE', ARRAY[$Cluster]::bigint[], false) s on s.oid = metric.entity_oid\n  where $__timeFilter(time)\n  AND entity_type = 'PHYSICAL_MACHINE'\n  AND time BETWEEN s.from_time AND s.to_time\n  AND type = 'STORAGE_AMOUNT'  */\n  \n  with monthly_Hosts as (\n    select date_trunc('hour', time) as current\n          ,entity_oid as hosts_oid\n      FROM (\n        select time\n              ,entity_oid\n          from extractor.metric\n         join scope s on s.scoped_oid = entity_oid\n         WHERE entity_type = 'PHYSICAL_MACHINE'\n           AND seed_oid in ($Cluster)\n           AND (start,finish) overlaps ($__timeFrom(), $__timeTo())\n           AND type = 'CPU'\n           AND $__timeFilter(time)\n      ) as metric_data\n     GROUP BY 1, 2\n),\nadded_and_removed as (\n    SELECT COUNT(DISTINCT hosts_oid) FILTER (where current = (select max(current) from monthly_Hosts)) as \"Hosts Total Count\",\n           COUNT(DISTINCT hosts_oid) FILTER (WHERE hosts_oid NOT IN (SELECT DISTINCT hosts_oid\n                                                                 FROM monthly_Hosts m2\n                                                               WHERE m2.current = (select min(current) from monthly_Hosts))) as \"Hosts Added\"\n          ,COUNT(DISTINCT hosts_oid) FILTER (WHERE hosts_oid NOT IN (SELECT DISTINCT hosts_oid\n                                                                 FROM monthly_Hosts m2\n                                                                WHERE m2.current = (select max(current) from monthly_Hosts))) as \"Hosts Removed\"\n      FROM monthly_Hosts m1\n)\nselect * from added_and_removed\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Scoped Host Counter (within Timescale)",
      "transformations": [
        {
          "id": "filterByRefId",
          "options": {}
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Hosts Delta",
            "binary": {
              "left": "Hosts Added",
              "operator": "-",
              "reducer": "sum",
              "right": "Hosts Removed"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Host Total Count": 3,
              "Hosts Added": 0,
              "Hosts Delta": 2,
              "Hosts Removed": 1
            },
            "renameByName": {}
          }
        }
      ],
      "type": "stat"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 18,
        "w": 12,
        "x": 0,
        "y": 4
      },
      "id": 42,
      "options": {
        "legend": {
          "displayMode": "list",
          "placement": "bottom"
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- ! Old Quick Subract Query\n\n/*\nselect \n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) as \"Previous VM Count\", count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Current VM Count\",\n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) - count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Deleted VM Count\"\nfrom metric\njoin scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[$Cluster]::bigint[], false) s on s.oid = metric.entity_oid\n  where $__timeFilter(time)\n  AND entity_type = 'VIRTUAL_MACHINE'\n  AND time BETWEEN s.from_time AND s.to_time\n  AND type = 'STORAGE_AMOUNT'  */\n  \n  with monthly_vms as (\n    select date_trunc('hour', time) as current\n          ,entity_oid as vm_oid\n      FROM (\n        select time\n              ,entity_oid\n          from extractor.metric\n          join scope s on s.scoped_oid = entity_oid\n         WHERE entity_type = 'VIRTUAL_MACHINE'\n           AND type = 'STORAGE_PROVISIONED'\n           AND $__timeFilter(time)\n           and s.seed_oid in ($Cluster)\n           and (start, finish) overlaps ($__timeFrom(), $__timeTo())\n      ) as metric_data\n     GROUP BY 1, 2\n),\nadded_and_removed as (\n    SELECT COUNT(DISTINCT vm_oid) FILTER (where current = (select max(current) from monthly_vms)) as \"Virtual Machine Total Count\",\n           COUNT(DISTINCT vm_oid) FILTER (WHERE vm_oid NOT IN (SELECT DISTINCT vm_oid\n                                                                 FROM monthly_vms m2\n                                                               WHERE m2.current = (select min(current) from monthly_vms))) as \"Virtual Machines Added\"\n          ,COUNT(DISTINCT vm_oid) FILTER (WHERE vm_oid NOT IN (SELECT DISTINCT vm_oid\n                                                                 FROM monthly_vms m2\n                                                                WHERE m2.current = (select max(current) from monthly_vms))) as \"Virtual Machines Removed\"\n      FROM monthly_vms m1\n)\nselect * from added_and_removed\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Scoped Virtual Machines Counter (within Timescale)",
      "transformations": [
        {
          "id": "filterByRefId",
          "options": {}
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Virtual Machine Delta",
            "binary": {
              "left": "Virtual Machines Added",
              "operator": "-",
              "reducer": "sum",
              "right": "Virtual Machines Removed"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Virtual Machine Delta": 2,
              "Virtual Machine Total Count": 3,
              "Virtual Machines Added": 1,
              "Virtual Machines Removed": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "piechart"
    },
    {
      "datasource": "Turbo Timescale",
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 18,
        "w": 12,
        "x": 12,
        "y": 4
      },
      "id": 43,
      "options": {
        "legend": {
          "displayMode": "list",
          "placement": "bottom"
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- ! Old Quick Subract Query\n\n/*\nselect \n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) as \"Previous Host Count\", count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Current Host Count\",\n    count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeFrom()::date)) - count(distinct entity_oid) filter (where date_trunc('day', time) = date_trunc('day', $__timeTo()::date)) as \"Deleted Host Count\"\nfrom metric\njoin scope_to($__timeFrom(), $__timeTo(), 'PHYSICAL_MACHINE', ARRAY[$Cluster]::bigint[], false) s on s.oid = metric.entity_oid\n  where $__timeFilter(time)\n  AND entity_type = 'PHYSICAL_MACHINE'\n  AND time BETWEEN s.from_time AND s.to_time\n  AND type = 'STORAGE_AMOUNT'  */\n  \n  with monthly_Hosts as (\n    select date_trunc('hour', time) as current\n          ,entity_oid as hosts_oid\n      FROM (\n        select time\n              ,entity_oid\n          from extractor.metric\n         join scope s on s.scoped_oid = entity_oid\n         WHERE entity_type = 'PHYSICAL_MACHINE'\n           AND seed_oid in ($Cluster)\n           AND (start,finish) overlaps ($__timeFrom(), $__timeTo())\n           AND type = 'CPU'\n           AND $__timeFilter(time)\n      ) as metric_data\n     GROUP BY 1, 2\n),\nadded_and_removed as (\n    SELECT COUNT(DISTINCT hosts_oid) FILTER (where current = (select max(current) from monthly_Hosts)) as \"Hosts Total Count\",\n           COUNT(DISTINCT hosts_oid) FILTER (WHERE hosts_oid NOT IN (SELECT DISTINCT hosts_oid\n                                                                 FROM monthly_Hosts m2\n                                                               WHERE m2.current = (select min(current) from monthly_Hosts))) as \"Hosts Added\"\n          ,COUNT(DISTINCT hosts_oid) FILTER (WHERE hosts_oid NOT IN (SELECT DISTINCT hosts_oid\n                                                                 FROM monthly_Hosts m2\n                                                                WHERE m2.current = (select max(current) from monthly_Hosts))) as \"Hosts Removed\"\n      FROM monthly_Hosts m1\n)\nselect * from added_and_removed\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Scoped Host Counter (within Timescale)",
      "transformations": [
        {
          "id": "filterByRefId",
          "options": {}
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "Hosts Delta",
            "binary": {
              "left": "Hosts Added",
              "operator": "-",
              "reducer": "sum",
              "right": "Hosts Removed"
            },
            "mode": "binary",
            "reduce": {
              "reducer": "sum"
            },
            "replaceFields": false
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Host Total Count": 3,
              "Hosts Added": 0,
              "Hosts Delta": 2,
              "Hosts Removed": 1
            },
            "renameByName": {}
          }
        }
      ],
      "type": "piechart"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": null,
            "displayMode": "auto",
            "filterable": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Capacity"
            },
            "properties": [
              {
                "id": "unit",
                "value": "hertz"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Used Max"
            },
            "properties": [
              {
                "id": "unit",
                "value": "hertz"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Used Avg"
            },
            "properties": [
              {
                "id": "unit",
                "value": "hertz"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "CPU Cores"
            },
            "properties": [
              {
                "id": "unit",
                "value": "none"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Host Count"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 251
              },
              {
                "id": "unit",
                "value": "string"
              },
              {
                "id": "unit",
                "value": "string"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "VM Count"
            },
            "properties": [
              {
                "id": "unit",
                "value": "string"
              },
              {
                "id": "unit",
                "value": "string"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "vCPU Cores"
            },
            "properties": [
              {
                "id": "unit",
                "value": "string"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": ".*Memory.*"
            },
            "properties": [
              {
                "id": "unit",
                "value": "none"
              },
              {
                "id": "unit",
                "value": "decmbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": ".*Storage.*"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Over-Provisioned"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 159
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 24,
        "w": 24,
        "x": 0,
        "y": 22
      },
      "id": 2,
      "options": {
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "CPU Cores"
          }
        ]
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with hosts_by_cluster as (\n \tselect e.oid as pm_oid,\n \t\t   g.oid as cluster_oid,\n \t\t   g.name as cluster_name,\n \t\t   avg((e.attrs ->> 'num_cpus')::numeric) as cpus\n \tfrom entity as e\n \tjoin scope s on s.seed_oid = e.oid\n \tjoin entity g on g.oid = s.scoped_oid \n \twhere s.scoped_type = 'COMPUTE_CLUSTER'\n \tand e.type = 'PHYSICAL_MACHINE'\n \tand g.type = 'COMPUTE_CLUSTER'\n \tand (s.scoped_oid in ($Cluster))\n \tand (start, finish) OVERLAPS ($__timeFrom(), $__timeTo())\n \tand (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n \tand (g.first_seen, g.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n group by 1,2,3\n ),\n \n pm_stats as (\n \tselect pm_oid,\n \t\t  AVG(cpu_used) as cpu_used,\n \t\t  MAX(cpu_used) as cpu_max,\n \t\t  avg(cpu_capacity) as cpu_capacity,\n      AVG(mem_used) as mem_used,\n \t\t  MAX(mem_used) as mem_max,\n \t\t  avg(mem_capacity) as mem_capacity,\n      avg(mem_provisioned) as mem_provisioned\n \tfrom \n\t \t(select entity_oid as pm_oid\n          ,time\n\t \t      ,max(current) filter (where type = 'CPU') as cpu_used\n\t \t      ,max(capacity) filter (where type = 'CPU') as cpu_capacity\n          ,max(current) filter (where type = 'MEM') as mem_used\n\t \t      ,max(capacity) filter (where type = 'MEM') as mem_capacity\n          ,max(current) filter (where type = 'MEM_PROVISIONED') as mem_provisioned\n\t \t  from metric\n\t \t  where type in ('CPU','MEM', 'MEM_PROVISIONED')\n\t \t  and consumed is null\n\t \t  and $__timeFilter(time)\n    group by 1, 2\n\t \t ) as data\n\t group by 1\n ),\n\n ds_stats as (\n \tselect ds_oid,\n \t\t  AVG(storage_cap) as stor_cap,\n \t\t  AVG(storage_prov) as stor_prov\n \tfrom \n\t \t(select entity_oid as ds_oid\n          ,time\n\t \t      ,max(capacity) filter (where type = 'STORAGE_AMOUNT') as storage_cap\n\t \t      ,max(current) filter (where type = 'STORAGE_PROVISIONED') as storage_prov\n\t \t  from metric\n\t \t  where type in ('STORAGE_AMOUNT','STORAGE_PROVISIONED')\n\t \t  and consumed is null\n\t \t  and $__timeFilter(time)\n    group by 1, 2\n\t \t ) as data\n\t group by 1\n ),\n\n ds_by_cluster as (\n  select cluster_oid,\n         sum(stor_cap) as stor_cap,\n         sum(stor_prov) as stor_prov\n   from\n      (select e.oid as ds_oid,\n          scoped_oid as cluster_oid\n         from entity as e\n         join scope s on s.seed_oid = e.oid\n         where s.scoped_type = 'COMPUTE_CLUSTER'\n         and e.type = 'STORAGE'\n         and (s.scoped_oid in ($Cluster))\n         and (start, finish) OVERLAPS ($__timeFrom(), $__timeTo())\n         and (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n        group by 1,2) as data\n    join ds_stats on ds_stats.ds_oid = data.ds_oid\n    group by 1\n ),\n\n vm_stats as (\n \tselect cluster_oid\n \t      ,count(distinct vm_oid) as vm_count\n \t      ,sum(vcpus) as vcpu_count\n \t  from\n     \t(select e.oid as vm_oid,\n     \t\t   scoped_oid as cluster_oid,\n     \t\t   avg((e.attrs ->> 'num_cpus')::numeric) as vcpus\n           \tfrom entity as e\n           \tjoin scope s on s.seed_oid = e.oid\n           \twhere s.scoped_type = 'COMPUTE_CLUSTER'\n           \tand e.type = 'VIRTUAL_MACHINE'\n           \tand (s.scoped_oid in ($Cluster))\n           \tand (start, finish) OVERLAPS ($__timeFrom(), $__timeTo())\n           \tand (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n           group by 1,2) as a\n      group by 1\n )\n \n select hosts_by_cluster.cluster_name as \"Cluster Name\"\n       ,count(distinct pm_stats.pm_oid) as \"Host Count\"\n       ,max(vm_count) as \"VM Count\"\n       ,sum(cpus) as \"CPU Cores\"\n       ,max(vcpu_count) as \"vCPU Cores\"\n       ,max(vcpu_count)/sum(cpus) as \"VCPU/CPU Ratio\"\n       ,avg(cpu_max)/nullif(avg(cpu_capacity),0) as \"CPU Util Max\"\n       ,avg(cpu_used)/nullif(avg(cpu_capacity),0) as \"CPU Util Avg\"\n       ,sum(cpu_capacity)*1000 as \"CPU Capacity\"\n       ,sum(cpu_max)*1000 as \"CPU Used Max\"\n       ,sum(cpu_used)*1000 as \"CPU Used Avg\"\n       ,avg(mem_max)/nullif(avg(mem_capacity),0) as \"Mem Utilization Max\"\n       ,avg(mem_used)/nullif(avg(mem_capacity),0) as \"Mem Utilization Avg\"\n       ,sum(mem_capacity)/1024 as \"Memory Capacity\"\n       ,sum(mem_max)/1024 as \"Memory Used Max\"\n       ,sum(mem_used)/1024 as \"Memory Used Average\"\n       ,sum(mem_provisioned)/sum(mem_capacity) as \"Memory Over-Provisioning\"\n       ,max(stor_cap)/1024 as \"Storage Capacity\"\n       ,max(stor_prov)/1024 as \"Storage Provisioned\"\n       ,max(stor_prov)/max(stor_cap) as \"Storage Over-Provisioned\"\n   from hosts_by_cluster, pm_stats, vm_stats, ds_by_cluster\n   where pm_stats.pm_oid = hosts_by_cluster.pm_oid\n     AND vm_stats.cluster_oid = hosts_by_cluster.cluster_oid \n     AND ds_by_cluster.cluster_oid = hosts_by_cluster.cluster_oid\n   group by 1\n        ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Cluster Capacity",
      "type": "table"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": null,
            "displayMode": "auto",
            "filterable": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percentunit"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 24,
        "w": 24,
        "x": 0,
        "y": 46
      },
      "id": 46,
      "options": {
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "CPU Cores"
          }
        ]
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with hosts_by_cluster as (\n \tselect e.oid as pm_oid,\n \t\t   g.oid as cluster_oid,\n \t\t   g.name as cluster_name,\n \t\t   avg((e.attrs ->> 'num_cpus')::numeric) as cpus\n \tfrom entity as e\n \tjoin scope s on s.seed_oid = e.oid\n \tjoin entity g on g.oid = s.scoped_oid\n \twhere s.scoped_type = 'COMPUTE_CLUSTER'\n \tand e.type = 'PHYSICAL_MACHINE'\n \tand g.type = 'COMPUTE_CLUSTER'\n \tand (s.scoped_oid in ($Cluster))\n \tand (start, finish) OVERLAPS ($__timeFrom(), $__timeTo())\n \tand (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n \tand (g.first_seen, g.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n group by 1,2,3\n ),\n\n pm_stats as (\n \tselect pm_oid,\n     \tavg(cpu_used) as cpu_used,\n \t\t  MAX(cpu_used) as cpu_max,\n \t\t  avg(cpu_capacity) as cpu_capacity,\n      AVG(mem_used) as mem_used,\n \t\t  MAX(mem_used) as mem_max,\n \t\t  avg(mem_capacity) as mem_capacity,\n      avg(mem_provisioned) as mem_provisioned\n \tfrom\n\t \t(select entity_oid as pm_oid\n          ,time\n\t \t      ,max(current) filter (where type = 'CPU') as cpu_used\n\t \t      ,max(capacity) filter (where type = 'CPU') as cpu_capacity\n          ,max(current) filter (where type = 'MEM') as mem_used\n\t \t      ,max(capacity) filter (where type = 'MEM') as mem_capacity\n          ,max(current) filter (where type = 'MEM_PROVISIONED') as mem_provisioned\n\t \t  from metric\n\t \t  where type in ('CPU','MEM', 'MEM_PROVISIONED')\n\t \t  and consumed is null\n\t \t  and $__timeFilter(time)\n    group by 1, 2\n\t \t ) as data\n\t group by 1\n ),\n\n ds_stats as (\n \tselect ds_oid,\n \t\t  AVG(storage_cap) as stor_cap,\n \t\t  AVG(storage_prov) as stor_prov,\n      AVG(storage_used) as stor_used,\n      MAX(storage_used) as stor_max\n      \n \tfrom\n\t \t(select entity_oid as ds_oid\n          ,time\n\t \t      ,max(capacity) filter (where type = 'STORAGE_AMOUNT') as storage_cap\n\t \t      ,max(current) filter (where type = 'STORAGE_PROVISIONED') as storage_prov\n          ,max(current) filter (where type = 'STORAGE_AMOUNT') as storage_used\n\t \t  from metric\n\t \t  where type in ('STORAGE_AMOUNT','STORAGE_PROVISIONED')\n\t \t  and consumed is null\n\t \t  and $__timeFilter(time)\n    group by 1, 2\n\t \t ) as data\n\t group by 1\n ),\n\n ds_by_cluster as (\n  select cluster_oid,\n         sum(stor_cap) as stor_cap,\n         sum(stor_prov) as stor_prov,\n         sum(stor_used) as stor_used,\n         sum(stor_max) as stor_max\n   from\n      (select e.oid as ds_oid,\n          scoped_oid as cluster_oid\n         from entity as e\n         join scope s on s.seed_oid = e.oid\n         where s.scoped_type = 'COMPUTE_CLUSTER'\n         and e.type = 'STORAGE'\n         and (s.scoped_oid in ($Cluster))\n         and (start, finish) OVERLAPS ($__timeFrom(), $__timeTo())\n         and (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n        group by 1,2) as data\n    join ds_stats on ds_stats.ds_oid = data.ds_oid\n    group by 1\n ),\n\n vm_stats as (\n \tselect cluster_oid\n \t      ,count(distinct vm_oid) as vm_count\n \t      ,sum(vcpus) as vcpu_count\n \t  from\n     \t(select e.oid as vm_oid,\n     \t\t   scoped_oid as cluster_oid,\n     \t\t   avg((e.attrs ->> 'num_cpus')::numeric) as vcpus\n           \tfrom entity as e\n           \tjoin scope s on s.seed_oid = e.oid\n           \twhere s.scoped_type = 'COMPUTE_CLUSTER'\n           \tand e.type = 'VIRTUAL_MACHINE'\n           \tand (s.scoped_oid in ($Cluster))\n           \tand (start, finish) OVERLAPS ($__timeFrom(), $__timeTo())\n           \tand (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n           group by 1,2) as a\n      group by 1\n )\n\n select hosts_by_cluster.cluster_name as \"Cluster Name\"\n       ,avg(cpu_used)/nullif(avg(cpu_capacity),0) as \"CPU Utilization\"\n       ,avg(cpu_max)/nullif(avg(cpu_capacity),0) as \"CPU Utilization Max\"\n       ,avg(mem_used)/nullif(avg(mem_capacity),0) as \"Memory Util Avg\"\n       ,avg(mem_max)/nullif(avg(mem_capacity),0) as \"Memory Util Max\"\n       ,avg(stor_used)/nullif(avg(stor_cap),0) as \"Datastore Utilization Avg\"\n       ,avg(stor_max)/nullif(avg(stor_cap),0) as \"Datastore Utilization Max\"\n   from hosts_by_cluster, pm_stats, vm_stats, ds_by_cluster\n   where pm_stats.pm_oid = hosts_by_cluster.pm_oid\n     AND vm_stats.cluster_oid = hosts_by_cluster.cluster_oid\n     AND ds_by_cluster.cluster_oid = hosts_by_cluster.cluster_oid\n   group by 1\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Cluster Peaks",
      "type": "table"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": null,
            "displayMode": "auto",
            "filterable": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Iops Used"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 235
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Iops Peak"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 223
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Provisioned (GB)"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 643
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Capacity (GB)"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 281
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Used (GB)"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 666
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Latency Used"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 266
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Latency Peak"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 258
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Datastore Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 353
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Cluster Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 656
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Datacenter"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 333
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "VM Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 699
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Virtual Machine Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 656
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Virtual Machine vCPUs Allocated"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 974
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 11,
        "w": 24,
        "x": 0,
        "y": 70
      },
      "id": 47,
      "options": {
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Host Stats Panel\nwith pms_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as pm_oid,\n        (e.attrs ->> 'num_cpus')::numeric as vcpus,\n        e.name as pm_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'VIRTUAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\npm_stats as (\n     select pm_oid\n          ,avg(cpu_used) as cpu_used_avg\n          ,max(cpu_used) as cpu_used_max\n          ,percentile_cont(.97) within group (order by cpu_used/cpu_capacity asc) cpu_util_percentile\n          ,avg(cpu_used/cpu_capacity) as cpu_util_avg\n          ,max(cpu_used/cpu_capacity) as cpu_util_max\n          ,avg(cpu_capacity) as cpu_capacity \n          ,avg(mem_used) as mem_used_avg\n          ,max(mem_used) as mem_used_max\n          ,percentile_cont(.97) within group (order by mem_used/mem_capacity asc) mem_util_percentile\n          ,avg(mem_used/mem_capacity) as mem_util_avg\n          ,max(mem_used/mem_capacity) as mem_util_max\n          ,avg(mem_capacity) as mem_capacity\n    from\n        (SELECT entity_oid as pm_oid\n               ,time\n               ,max(current) FILTER (where type = 'VCPU') as cpu_used\n               ,max(capacity)  FILTER (where type = 'VCPU') as cpu_capacity\n               ,max(current) FILTER (where type = 'VMEM') as mem_used\n               ,max(capacity)  FILTER (where type = 'VMEM') as mem_capacity\n          FROM metric\n         WHERE type in ('VCPU', 'VMEM')\n           AND $__timeFilter(time)\n           AND consumed is null\n           and entity_type = 'VIRTUAL_MACHINE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\nselect pm_name as \"Virtual Machine Name\",\n--       SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       vcpus as \"Virtual Machine vCPUs Allocated\",\n/*     cpu_capacity as \"CPU Capacity (MHz)\",\n       cpu_used_avg as \"CPU Avg Used (MHz)\",\n       cpu_used_max as \"CPU Max Used (MHz)\", */\n       mem_capacity/1024/1024 as \"Mem Capacity (GB)\"\n/*     mem_used_avg/1024/1024 as \"Mem Avg Used (GB)\",\n       mem_used_max/1024/1024 as \"Mem Max Used (GB)\",\n       cpu_util_avg*100 as \"CPU Avg Util (%)\",\n       cpu_util_max*100 as \"CPU Max Util (%)\",\n       cpu_util_percentile*100 as \"CPU Percentile Util (%)\",\n       mem_util_avg*100 as \"Mem Avg Util (%)\",\n       mem_util_max*100 as \"Mem Max Util (%)\",\n       mem_util_percentile*100 as \"Mem Percentile Util (%)\" \n*/\n  from pm_stats\n  JOIN pms_by_cluster on pms_by_cluster.pm_oid = pm_stats.pm_oid\n;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Virtual Machine Compute Stats - Basic",
      "type": "table"
    },
    {
      "datasource": "Turbo Timescale",
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": null,
            "displayMode": "auto",
            "filterable": true
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Provisioned (GB)"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Used (GB)"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decgbytes"
              },
              {
                "id": "custom.width",
                "value": 680
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Storage Utilization (%)"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percentunit"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Cluster Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 675
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 81
      },
      "id": 35,
      "options": {
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "8.0.6",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n-- Datastore Stats Panel\nwith ds_by_cluster as (\n    SELECT DISTINCT ON (e.oid)\n        g.name as cluster_name,\n        g.oid as cluster_oid,\n        e.oid as ds_oid,\n        e.name as ds_name\n      FROM entity e\n      JOIN scope s1 ON (s1.seed_oid = e.oid)\n      JOIN entity g ON (g.oid = s1.scoped_oid)\n     WHERE e.type = 'VIRTUAL_MACHINE'\n       AND (s1.scoped_type = 'COMPUTE_CLUSTER')\n       AND (s1.scoped_oid in ($Cluster))\n       AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())\n       AND (s1.start, s1.finish) OVERLAPS ($__timeFrom(), $__timeTo())\n),\n\nds_stats as (\n     select ds_oid\n          ,avg(stor_used) as stor_used\n          ,avg(stor_used/nullif(stor_provisioned,0)) as stor_util\n          ,avg(stor_provisioned) as stor_provisioned\n    from\n        (SELECT entity_oid as ds_oid\n               ,time\n               ,max(consumed) FILTER (where type = 'STORAGE_AMOUNT') as stor_used\n               ,max(consumed) FILTER (where type = 'STORAGE_PROVISIONED') as stor_provisioned\n          FROM metric\n         WHERE type in ('STORAGE_AMOUNT','STORAGE_PROVISIONED')\n           AND $__timeFilter(time)\n           and entity_type = 'VIRTUAL_MACHINE'\n         GROUP BY 1,2) as cluster_stats\n    group by 1\n)\n\n\n-- TODO: Update all of the column names below with the new names above\n\n\nselect -- SPLIT_PART(cluster_name, '/', 1) as \"Datacenter\",\n       ds_name as \"VM Name\",\n       SPLIT_PART(cluster_name, '/', 2) as \"Cluster Name\",\n       stor_provisioned/1024 as \"Storage Provisioned (GB)\",\n       stor_used/1024 as \"Storage Used (GB)\",\n       stor_util as \"Storage Utilization (%)\"\n  from ds_stats\n  join ds_by_cluster on ds_stats.ds_oid = ds_by_cluster.ds_oid\n;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "savings"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "completed_action",
          "timeColumn": "recommendation_time",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Virtual Machine Storage",
      "type": "table"
    }
  ],
  "refresh": "",
  "schemaVersion": 30,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": "Turbo Timescale",
        "definition": "SELECT DISTINCT name as __text\n             ,oid as __value\n   FROM entity\n WHERE type = 'DATACENTER'\nAND (first_seen, last_seen) overlaps ($__timeFrom(), $__timeTo())\nORDER BY 1",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": null,
        "multi": true,
        "name": "Datacenter",
        "options": [],
        "query": "SELECT DISTINCT name as __text\n             ,oid as __value\n   FROM entity\n WHERE type = 'DATACENTER'\nAND (first_seen, last_seen) overlaps ($__timeFrom(), $__timeTo())\nORDER BY 1",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": "Turbo Timescale",
        "definition": "SELECT DISTINCT name as __text\n            ,oid as __value\n   FROM entity e\n   JOIN scope s on s.seed_oid = e.oid\n WHERE e.type = 'COMPUTE_CLUSTER'\n  AND (e.first_seen, e.last_seen) overlaps ($__timeFrom(), $__timeTo())\n  and s.scoped_type = 'DATACENTER'\n  and s.scoped_oid in ($Datacenter)",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": null,
        "multi": true,
        "name": "Cluster",
        "options": [],
        "query": "SELECT DISTINCT name as __text\n            ,oid as __value\n   FROM entity e\n   JOIN scope s on s.seed_oid = e.oid\n WHERE e.type = 'COMPUTE_CLUSTER'\n  AND (e.first_seen, e.last_seen) overlaps ($__timeFrom(), $__timeTo())\n  and s.scoped_type = 'DATACENTER'\n  and s.scoped_oid in ($Datacenter)",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "On-Prem Cluster Capacity and Utilization /",
  "uid": "tBD-6Oc7k",
  "version": 54
}
